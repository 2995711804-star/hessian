function m_interactive_parameter_tuning(phaX, difX)
% =========================================================================
% 交互式参数调优工具
% 实时调整参数并查看效果，帮助优化重建质量
% 输入：
%   - phaX: 原始相位图
%   - difX: 调制度图
% =========================================================================

    % 创建主窗口
    fig = figure('Name', '参数调优工具', 'Position', [100, 100, 1600, 900], ...
                 'NumberTitle', 'off', 'MenuBar', 'none', 'ToolBar', 'figure');
    
    % 初始参数
    params = struct();
    params.scale1 = 1;
    params.scale2 = 2;
    params.scale3 = 4;
    params.alpha = 0.5;
    params.iterations = 10;
    params.Q_threshold = 0.3;
    
    % 创建控制面板
    control_panel = uipanel(fig, 'Title', '参数控制', 'Position', [0.01, 0.01, 0.25, 0.98]);
    
    % 多尺度参数
    uicontrol(control_panel, 'Style', 'text', 'String', '=== 多尺度Hessian ===', ...
              'Units', 'normalized', 'Position', [0.05, 0.95, 0.9, 0.03], ...
              'FontWeight', 'bold', 'HorizontalAlignment', 'left');
    
    uicontrol(control_panel, 'Style', 'text', 'String', '尺度1 (细节):', ...
              'Units', 'normalized', 'Position', [0.05, 0.90, 0.4, 0.03]);
    slider_scale1 = uicontrol(control_panel, 'Style', 'slider', ...
              'Min', 0.5, 'Max', 3, 'Value', params.scale1, ...
              'Units', 'normalized', 'Position', [0.5, 0.90, 0.35, 0.03], ...
              'Callback', @(src, evt) update_display());
    text_scale1 = uicontrol(control_panel, 'Style', 'text', ...
              'String', sprintf('%.1f', params.scale1), ...
              'Units', 'normalized', 'Position', [0.87, 0.90, 0.1, 0.03]);
    
    uicontrol(control_panel, 'Style', 'text', 'String', '尺度2 (中等):', ...
              'Units', 'normalized', 'Position', [0.05, 0.85, 0.4, 0.03]);
    slider_scale2 = uicontrol(control_panel, 'Style', 'slider', ...
              'Min', 1, 'Max', 5, 'Value', params.scale2, ...
              'Units', 'normalized', 'Position', [0.5, 0.85, 0.35, 0.03], ...
              'Callback', @(src, evt) update_display());
    text_scale2 = uicontrol(control_panel, 'Style', 'text', ...
              'String', sprintf('%.1f', params.scale2), ...
              'Units', 'normalized', 'Position', [0.87, 0.85, 0.1, 0.03]);
    
    uicontrol(control_panel, 'Style', 'text', 'String', '尺度3 (粗略):', ...
              'Units', 'normalized', 'Position', [0.05, 0.80, 0.4, 0.03]);
    slider_scale3 = uicontrol(control_panel, 'Style', 'slider', ...
              'Min', 2, 'Max', 8, 'Value', params.scale3, ...
              'Units', 'normalized', 'Position', [0.5, 0.80, 0.35, 0.03], ...
              'Callback', @(src, evt) update_display());
    text_scale3 = uicontrol(control_panel, 'Style', 'text', ...
              'String', sprintf('%.1f', params.scale3), ...
              'Units', 'normalized', 'Position', [0.87, 0.80, 0.1, 0.03]);
    
    % 融合权重参数
    uicontrol(control_panel, 'Style', 'text', 'String', '=== 质量融合 ===', ...
              'Units', 'normalized', 'Position', [0.05, 0.73, 0.9, 0.03], ...
              'FontWeight', 'bold', 'HorizontalAlignment', 'left');
    
    uicontrol(control_panel, 'Style', 'text', 'String', 'Alpha (Hessian权重):', ...
              'Units', 'normalized', 'Position', [0.05, 0.68, 0.4, 0.03]);
    slider_alpha = uicontrol(control_panel, 'Style', 'slider', ...
              'Min', 0, 'Max', 1, 'Value', params.alpha, ...
              'Units', 'normalized', 'Position', [0.5, 0.68, 0.35, 0.03], ...
              'Callback', @(src, evt) update_display());
    text_alpha = uicontrol(control_panel, 'Style', 'text', ...
              'String', sprintf('%.2f', params.alpha), ...
              'Units', 'normalized', 'Position', [0.87, 0.68, 0.1, 0.03]);
    
    % 精炼参数
    uicontrol(control_panel, 'Style', 'text', 'String', '=== 边缘保持精炼 ===', ...
              'Units', 'normalized', 'Position', [0.05, 0.61, 0.9, 0.03], ...
              'FontWeight', 'bold', 'HorizontalAlignment', 'left');
    
    uicontrol(control_panel, 'Style', 'text', 'String', '迭代次数:', ...
              'Units', 'normalized', 'Position', [0.05, 0.56, 0.4, 0.03]);
    slider_iterations = uicontrol(control_panel, 'Style', 'slider', ...
              'Min', 1, 'Max', 30, 'Value', params.iterations, ...
              'Units', 'normalized', 'Position', [0.5, 0.56, 0.35, 0.03], ...
              'Callback', @(src, evt) update_display());
    text_iterations = uicontrol(control_panel, 'Style', 'text', ...
              'String', sprintf('%d', params.iterations), ...
              'Units', 'normalized', 'Position', [0.87, 0.56, 0.1, 0.03]);
    
    % 质量阈值
    uicontrol(control_panel, 'Style', 'text', 'String', '=== 点云过滤 ===', ...
              'Units', 'normalized', 'Position', [0.05, 0.49, 0.9, 0.03], ...
              'FontWeight', 'bold', 'HorizontalAlignment', 'left');
    
    uicontrol(control_panel, 'Style', 'text', 'String', '质量阈值:', ...
              'Units', 'normalized', 'Position', [0.05, 0.44, 0.4, 0.03]);
    slider_threshold = uicontrol(control_panel, 'Style', 'slider', ...
              'Min', 0, 'Max', 1, 'Value', params.Q_threshold, ...
              'Units', 'normalized', 'Position', [0.5, 0.44, 0.35, 0.03], ...
              'Callback', @(src, evt) update_display());
    text_threshold = uicontrol(control_panel, 'Style', 'text', ...
              'String', sprintf('%.2f', params.Q_threshold), ...
              'Units', 'normalized', 'Position', [0.87, 0.44, 0.1, 0.03]);
    
    % 按钮
    uicontrol(control_panel, 'Style', 'pushbutton', 'String', '重置默认参数', ...
              'Units', 'normalized', 'Position', [0.1, 0.35, 0.8, 0.05], ...
              'Callback', @reset_parameters);
    
    uicontrol(control_panel, 'Style', 'pushbutton', 'String', '导出当前参数', ...
              'Units', 'normalized', 'Position', [0.1, 0.28, 0.8, 0.05], ...
              'Callback', @export_parameters);
    
    uicontrol(control_panel, 'Style', 'pushbutton', 'String', '保存所有结果', ...
              'Units', 'normalized', 'Position', [0.1, 0.21, 0.8, 0.05], ...
              'Callback', @save_results, 'BackgroundColor', [0.2, 0.8, 0.2]);
    
    % 实时统计信息
    text_stats = uicontrol(control_panel, 'Style', 'text', ...
              'String', '统计信息将在此显示', ...
              'Units', 'normalized', 'Position', [0.05, 0.02, 0.9, 0.15], ...
              'BackgroundColor', [0.95, 0.95, 0.95], ...
              'HorizontalAlignment', 'left', 'FontSize', 8);
    
    % 创建显示区域
    display_panel = uipanel(fig, 'Title', '实时预览', 'Position', [0.27, 0.01, 0.72, 0.98]);
    
    % 6个子图
    ax1 = subplot(2, 3, 1, 'Parent', display_panel);
    ax2 = subplot(2, 3, 2, 'Parent', display_panel);
    ax3 = subplot(2, 3, 3, 'Parent', display_panel);
    ax4 = subplot(2, 3, 4, 'Parent', display_panel);
    ax5 = subplot(2, 3, 5, 'Parent', display_panel);
    ax6 = subplot(2, 3, 6, 'Parent', display_panel);
    
    % 初始显示
    update_display();
    
    % 更新显示的回调函数
    function update_display()
        % 读取当前参数
        params.scale1 = get(slider_scale1, 'Value');
        params.scale2 = get(slider_scale2, 'Value');
        params.scale3 = get(slider_scale3, 'Value');
        params.alpha = get(slider_alpha, 'Value');
        params.iterations = round(get(slider_iterations, 'Value'));
        params.Q_threshold = get(slider_threshold, 'Value');
        
        % 更新文本显示
        set(text_scale1, 'String', sprintf('%.1f', params.scale1));
        set(text_scale2, 'String', sprintf('%.1f', params.scale2));
        set(text_scale3, 'String', sprintf('%.1f', params.scale3));
        set(text_alpha, 'String', sprintf('%.2f', params.alpha));
        set(text_iterations, 'String', sprintf('%d', params.iterations));
        set(text_threshold, 'String', sprintf('%.2f', params.Q_threshold));
        
        % 计算结果
        tic;
        scales = [params.scale1, params.scale2, params.scale3];
        [Q_multiscale, edge_strength, feature_map] = m_calc_multiscale_hessian(phaX, scales);
        [Q_adaptive, region_map] = m_calc_adaptive_quality_fusion(phaX, difX, Q_multiscale, edge_strength, feature_map);
        [phaX_refined, confidence_map] = m_edge_preserving_refinement(phaX, Q_adaptive, edge_strength, params.iterations);
        compute_time = toc;
        
        % 更新显示
        imagesc(ax1, phaX); axis(ax1, 'image', 'off'); colormap(ax1, jet); colorbar(ax1);
        title(ax1, '原始相位', 'FontWeight', 'bold');
        
        imagesc(ax2, Q_adaptive); axis(ax2, 'image', 'off'); colormap(ax2, hot); colorbar(ax2);
        title(ax2, sprintf('自适应质量图 (α=%.2f)', params.alpha), 'FontWeight', 'bold');
        
        imagesc(ax3, edge_strength); axis(ax3, 'image', 'off'); colormap(ax3, hot); colorbar(ax3);
        title(ax3, '边缘强度', 'FontWeight', 'bold');
        
        imagesc(ax4, phaX_refined); axis(ax4, 'image', 'off'); colormap(ax4, jet); colorbar(ax4);
        title(ax4, sprintf('精炼相位 (迭代=%d)', params.iterations), 'FontWeight', 'bold');
        
        imagesc(ax5, Q_adaptive > params.Q_threshold); axis(ax5, 'image', 'off'); colormap(ax5, gray);
        title(ax5, sprintf('质量掩码 (阈值=%.2f)', params.Q_threshold), 'FontWeight', 'bold');
        
        imagesc(ax6, region_map); axis(ax6, 'image', 'off'); colormap(ax6, jet); colorbar(ax6);
        title(ax6, '区域分类 (1=平滑,2=边缘,3=纹理)', 'FontWeight', 'bold');
        
        % 计算统计信息
        valid_mask = phaX > 0 & ~isnan(phaX);
        Q_valid = Q_adaptive(valid_mask);
        
        stats_str = sprintf(['计算时间: %.3f 秒\n\n' ...
                           '质量统计:\n' ...
                           '  平均: %.4f\n' ...
                           '  标准差: %.4f\n' ...
                           '  高质量(>0.7): %.1f%%\n' ...
                           '  有效点: %d\n\n' ...
                           '区域分布:\n' ...
                           '  平滑: %.1f%%\n' ...
                           '  边缘: %.1f%%\n' ...
                           '  纹理: %.1f%%'], ...
                           compute_time, ...
                           mean(Q_valid), std(Q_valid), ...
                           sum(Q_valid > 0.7) / length(Q_valid) * 100, ...
                           sum(valid_mask(:)), ...
                           sum(region_map(:)==1)/numel(region_map)*100, ...
                           sum(region_map(:)==2)/numel(region_map)*100, ...
                           sum(region_map(:)==3)/numel(region_map)*100);
        
        set(text_stats, 'String', stats_str);
        drawnow;
    end
    
    % 重置参数
    function reset_parameters(~, ~)
        set(slider_scale1, 'Value', 1);
        set(slider_scale2, 'Value', 2);
        set(slider_scale3, 'Value', 4);
        set(slider_alpha, 'Value', 0.5);
        set(slider_iterations, 'Value', 10);
        set(slider_threshold, 'Value', 0.3);
        update_display();
    end
    
    % 导出参数
    function export_parameters(~, ~)
        param_str = sprintf(['最优参数配置\n' ...
                           '================\n' ...
                           '多尺度Hessian:\n' ...
                           '  scale1 = %.1f;\n' ...
                           '  scale2 = %.1f;\n' ...
                           '  scale3 = %.1f;\n' ...
                           '  scales = [%.1f, %.1f, %.1f];\n\n' ...
                           '质量融合:\n' ...
                           '  alpha = %.2f;\n\n' ...
                           '边缘保持精炼:\n' ...
                           '  iterations = %d;\n\n' ...
                           '点云过滤:\n' ...
                           '  Q_threshold = %.2f;\n'], ...
                           params.scale1, params.scale2, params.scale3, ...
                           params.scale1, params.scale2, params.scale3, ...
                           params.alpha, params.iterations, params.Q_threshold);
        
        clipboard('copy', param_str);
        msgbox('参数已复制到剪贴板！', '导出成功', 'help');
        fprintf('%s\n', param_str);
    end
    
    % 保存结果
    function save_results(~, ~)
        timestamp = datestr(now, 'yyyymmdd_HHMMSS');
        save_folder = ['tuning_results_', timestamp];
        mkdir(save_folder);
        
        % 保存当前图形
        saveas(fig, fullfile(save_folder, 'interactive_view.png'));
        saveas(fig, fullfile(save_folder, 'interactive_view.fig'));
        
        % 保存参数
        save(fullfile(save_folder, 'optimal_parameters.mat'), 'params');
        
        msgbox(['结果已保存到: ', save_folder], '保存成功', 'help');
    end
end
